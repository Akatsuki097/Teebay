type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  address: String
  password: String!
  products: [Product]!
}

input RegisterInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  address: String
  password: String!
}

type AuthPayload {
  token: String!
  user: User!
}


enum Category {
  ELECTRONICS
  FURNITURE
  HOME_APPLIANCES
  SPORTING_GOODS
  OUTDOOR
  TOYS
}

type Product {
  id: ID!
  title: String!
  category: Category!
  description: String
  price: Float!
  createdBy: User!
  buyer: User
  renter: User
  rentalEndDate: String
}

input RentInput {
  productId: ID!
  days: Int!
}

input ProductInput {
  title: String!
  category: Category!
  description: String
  price: Float!
}

type UserActivity {
  bought: [Product]
  sold: [Product]
  borrowed: [Product]
  lent: [Product]
}

type Query {

  userActivity: UserActivity
  #User Query
  allUsers: [User]!

  

  allProducts: [Product]!
  productById(id: ID!): Product
  # PRODUCT QUERIES
  myProducts: [Product]!
  
}

type Mutation {
  
  register(input: RegisterInput!): AuthPayload!
  #User signUp Login
  login(email: String!, password: String!): AuthPayload!

   
  createProduct(input: ProductInput!): Product!
  updateProduct(productId: ID!, input: ProductInput!): Product!
  deleteProduct(productId: ID!): Boolean!
  buyProduct(productId: ID!): Product
  rentProduct(input: RentInput!): Product
  returnProduct(productId: ID!): Product
  # PRODUCT CRUD

}